import { type NextRequest, NextResponse } from "next/server"
import { verifyAuth } from "@/lib/auth"
import { getMongoDb } from "@/lib/mongodb"
import { ObjectId } from "mongodb"
import type { PageShare, Notification } from "@/lib/db-types"
import crypto from "crypto"

// Sayfa paylaÅŸÄ±m API'si
export async function POST(req: NextRequest, { params }: { params: { id: string } }) {
  try {
    // KullanÄ±cÄ± kimliÄŸini doÄŸrula
    const userId = await verifyAuth(req)
    if (!userId) {
      return NextResponse.json({ success: false, message: "Unauthorized" }, { status: 401 })
    }

    const pageId = params.id
    const { email, accessLevel } = await req.json()

    if (!email || !accessLevel) {
      return NextResponse.json({ success: false, message: "Email ve eriÅŸim seviyesi gereklidir" }, { status: 400 })
    }

    // GeÃ§erli bir eriÅŸim seviyesi mi kontrol et
    if (accessLevel !== "view" && accessLevel !== "edit") {
      return NextResponse.json({ success: false, message: "GeÃ§ersiz eriÅŸim seviyesi" }, { status: 400 })
    }

    const db = await getMongoDb()

    // SayfanÄ±n var olduÄŸunu ve kullanÄ±cÄ±ya ait olduÄŸunu kontrol et
    const page = await db.collection("pages").findOne({
      _id: new ObjectId(pageId),
    })

    if (!page) {
      return NextResponse.json({ success: false, message: "Sayfa bulunamadÄ±" }, { status: 404 })
    }

    // SayfanÄ±n sahibi mi kontrol et
    if (page.userId.toString() !== userId) {
      // SayfanÄ±n sahibi deÄŸilse, paylaÅŸÄ±m yetkisi var mÄ± kontrol et
      const sharePermission = await db.collection("pageShares").findOne({
        pageId: new ObjectId(pageId),
        sharedWithEmail: email,
        accessLevel: "edit",
        status: "accepted",
      })

      if (!sharePermission) {
        return NextResponse.json({ success: false, message: "Bu sayfayÄ± paylaÅŸma yetkiniz yok" }, { status: 403 })
      }
    }

    // KullanÄ±cÄ±nÄ±n kendisiyle paylaÅŸmasÄ±nÄ± engelle
    const currentUser = await db.collection("users").findOne({ _id: new ObjectId(userId) })
    if (currentUser && currentUser.email === email) {
      return NextResponse.json({ success: false, message: "SayfayÄ± kendinizle paylaÅŸamazsÄ±nÄ±z" }, { status: 400 })
    }

    // Benzersiz davet token'Ä± oluÅŸtur
    const inviteToken = crypto.randomBytes(32).toString("hex")

    // Zaten paylaÅŸÄ±lmÄ±ÅŸ mÄ± kontrol et
    const existingShare = await db.collection("pageShares").findOne({
      pageId: new ObjectId(pageId),
      sharedWithEmail: email,
    })

    if (existingShare) {
      // EriÅŸim seviyesini ve token'Ä± gÃ¼ncelle
      await db.collection("pageShares").updateOne(
        { _id: existingShare._id },
        {
          $set: {
            accessLevel,
            inviteToken,
            status: "pending", // Yeni davet gÃ¶nderildiÄŸi iÃ§in pending yap
            updatedAt: new Date(),
          },
        },
      )

      // Yeni bildirim oluÅŸtur
      const notification: Notification = {
        recipientEmail: email,
        type: "share_invitation",
        content: `${currentUser?.name || "Bir kullanÄ±cÄ±"} sizinle "${page.title}" sayfasÄ±nÄ± paylaÅŸtÄ±.`,
        link: `/app/invite/${inviteToken}`,
        read: false,
        createdAt: new Date(),
      }

      await db.collection("notifications").insertOne(notification)

      // E-posta simÃ¼lasyonu
      console.log(`
ğŸ“§ E-POSTA GÃ–NDERÄ°LDÄ°:
Kime: ${email}
Konu: ${currentUser?.name || "Bir kullanÄ±cÄ±"} sizinle "${page.title}" sayfasÄ±nÄ± paylaÅŸtÄ±
Ä°Ã§erik: Sayfaya eriÅŸmek iÃ§in ÅŸu linke tÄ±klayÄ±n: ${process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000"}/app/invite/${inviteToken}
EriÅŸim Seviyesi: ${accessLevel === "edit" ? "DÃ¼zenleme" : "GÃ¶rÃ¼ntÃ¼leme"}
      `)

      return NextResponse.json({
        success: true,
        message: "PaylaÅŸÄ±m eriÅŸim seviyesi gÃ¼ncellendi ve yeni davet gÃ¶nderildi",
        share: {
          ...existingShare,
          accessLevel,
          inviteToken,
          status: "pending",
        },
        inviteLink: `/app/invite/${inviteToken}`,
      })
    }

    // Yeni paylaÅŸÄ±m oluÅŸtur
    const newShare: PageShare = {
      pageId: new ObjectId(pageId),
      sharedByUserId: new ObjectId(userId),
      sharedWithEmail: email,
      accessLevel,
      status: "pending",
      inviteToken,
      createdAt: new Date(),
    }

    const result = await db.collection("pageShares").insertOne(newShare)

    // Bildirim oluÅŸtur
    const notification: Notification = {
      recipientEmail: email,
      type: "share_invitation",
      content: `${currentUser?.name || "Bir kullanÄ±cÄ±"} sizinle "${page.title}" sayfasÄ±nÄ± paylaÅŸtÄ±.`,
      link: `/app/invite/${inviteToken}`,
      read: false,
      createdAt: new Date(),
    }

    await db.collection("notifications").insertOne(notification)

    // E-posta simÃ¼lasyonu
    console.log(`
ğŸ“§ E-POSTA GÃ–NDERÄ°LDÄ°:
Kime: ${email}
Konu: ${currentUser?.name || "Bir kullanÄ±cÄ±"} sizinle "${page.title}" sayfasÄ±nÄ± paylaÅŸtÄ±
Ä°Ã§erik: Sayfaya eriÅŸmek iÃ§in ÅŸu linke tÄ±klayÄ±n: ${process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000"}/app/invite/${inviteToken}
EriÅŸim Seviyesi: ${accessLevel === "edit" ? "DÃ¼zenleme" : "GÃ¶rÃ¼ntÃ¼leme"}
    `)

    return NextResponse.json({
      success: true,
      message: "Sayfa baÅŸarÄ±yla paylaÅŸÄ±ldÄ± ve davet e-postasÄ± gÃ¶nderildi",
      share: {
        _id: result.insertedId,
        ...newShare,
      },
      inviteLink: `/app/invite/${inviteToken}`,
    })
  } catch (error) {
    console.error("Sayfa paylaÅŸÄ±m hatasÄ±:", error)
    return NextResponse.json({ success: false, message: "Sayfa paylaÅŸÄ±lÄ±rken bir hata oluÅŸtu" }, { status: 500 })
  }
}

// Sayfa paylaÅŸÄ±mlarÄ±nÄ± getir
export async function GET(req: NextRequest, { params }: { params: { id: string } }) {
  try {
    // KullanÄ±cÄ± kimliÄŸini doÄŸrula
    const userId = await verifyAuth(req)
    if (!userId) {
      return NextResponse.json({ success: false, message: "Unauthorized" }, { status: 401 })
    }

    const pageId = params.id
    const db = await getMongoDb()

    // SayfanÄ±n var olduÄŸunu kontrol et
    const page = await db.collection("pages").findOne({
      _id: new ObjectId(pageId),
    })

    if (!page) {
      return NextResponse.json({ success: false, message: "Sayfa bulunamadÄ±" }, { status: 404 })
    }

    // SayfanÄ±n sahibi mi veya paylaÅŸÄ±m yetkisi var mÄ± kontrol et
    const isOwner = page.userId.toString() === userId

    if (!isOwner) {
      const currentUser = await db.collection("users").findOne({ _id: new ObjectId(userId) })

      if (!currentUser) {
        return NextResponse.json({ success: false, message: "KullanÄ±cÄ± bulunamadÄ±" }, { status: 404 })
      }

      const hasAccess = await db.collection("pageShares").findOne({
        pageId: new ObjectId(pageId),
        sharedWithEmail: currentUser.email,
        status: "accepted",
      })

      if (!hasAccess) {
        return NextResponse.json(
          { success: false, message: "Bu sayfanÄ±n paylaÅŸÄ±mlarÄ±nÄ± gÃ¶rÃ¼ntÃ¼leme yetkiniz yok" },
          { status: 403 },
        )
      }
    }

    // Sayfa paylaÅŸÄ±mlarÄ±nÄ± getir
    const shares = await db
      .collection("pageShares")
      .find({ pageId: new ObjectId(pageId) })
      .toArray()

    return NextResponse.json({
      success: true,
      shares: shares.map((share) => ({
        ...share,
        _id: share._id.toString(),
        pageId: share.pageId.toString(),
        sharedByUserId: share.sharedByUserId.toString(),
      })),
    })
  } catch (error) {
    console.error("PaylaÅŸÄ±mlarÄ± getirme hatasÄ±:", error)
    return NextResponse.json({ success: false, message: "PaylaÅŸÄ±mlar getirilirken bir hata oluÅŸtu" }, { status: 500 })
  }
}
